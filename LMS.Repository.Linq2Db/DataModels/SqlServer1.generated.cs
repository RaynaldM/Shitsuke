//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : LMS
	/// Data Source    : .
	/// Server Version : 12.00.4213
	/// </summary>
	public partial class LMSDB : LinqToDB.Data.DataConnection
	{
		/// <summary>
		/// User Extension Table of ASP.Net Identity Model
		/// </summary>
		public ITable<extenduser> extendusers { get { return this.GetTable<extenduser>(); } }
		/// <summary>
		/// Feedbacks created by users
		/// </summary>
		public ITable<feedback>   feedbacks   { get { return this.GetTable<feedback>(); } }
		/// <summary>
		/// Event logs created by applications
		/// </summary>
		public ITable<log>        logs        { get { return this.GetTable<log>(); } }
		/// <summary>
		/// Ping information from users
		/// </summary>
		public ITable<userping>   userpings   { get { return this.GetTable<userping>(); } }

		public LMSDB()
		{
			InitDataContext();
		}

		public LMSDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	/// <summary>
	/// User Extension Table of ASP.Net Identity Model
	/// </summary>
	[Table(Schema="dbo", Name="extenduser")]
	public partial class extenduser
	{
		/// <summary>
		/// Id comes from ASP.Net identity model, convert in GUID for Shitsuke
		/// </summary>
		[PrimaryKey(1), NotNull] public Guid   userid { get; set; } // uniqueidentifier
		[PrimaryKey(2), NotNull] public string key    { get; set; } // varchar(64)
		[Column,        NotNull] public string value  { get; set; } // nvarchar(512)
	}

	/// <summary>
	/// Feedbacks created by users
	/// </summary>
	[Table(Schema="dbo", Name="feedbacks")]
	public partial class feedback
	{
		[PrimaryKey, Identity   ] public long                          id            { get; set; } // bigint
		[Column,     NotNull    ] public string                        applicationid { get; set; } // char(8)
		/// <summary>
		/// Created Date (UTC)
		/// </summary>
		[Column,     NotNull    ] public DateTime                      utctimestamp  { get; set; } // datetime
		/// <summary>
		/// Feedback Type : Bug, Feedback, Question...
		/// </summary>
		[Column,     NotNull    ] public LMS.Core.Enums.FeedbackType   type          { get; set; } // tinyint
		/// <summary>
		/// Current status of feedback : new, open..
		/// </summary>
		[Column,     NotNull    ] public LMS.Core.Enums.FeedbackStatus status        { get; set; } // tinyint
		/// <summary>
		/// Feedback written by user
		/// </summary>
		[Column,     NotNull    ] public string                        comments      { get; set; } // nvarchar(2048)
		[Column,     NotNull    ] public string                        userid        { get; set; } // nvarchar(128)
		[Column,        Nullable] public string                        pageid        { get; set; } // varchar(128)
		/// <summary>
		/// Json Object contains some info on browser
		/// </summary>
		[Column,        Nullable] public string                        browserinfo   { get; set; } // varchar(1024)
		/// <summary>
		/// Screenshot take by user (convert from Base64 image)
		/// </summary>
		[Column,        Nullable] public byte[]                        screenshot    { get; set; } // image
	}

	/// <summary>
	/// Event logs created by applications
	/// </summary>
	[Table(Schema="dbo", Name="logs")]
	public partial class log
	{
		[PrimaryKey, Identity   ] public long     id            { get; set; } // bigint
		[Column,     NotNull    ] public string   applicationid { get; set; } // char(8)
		/// <summary>
		/// True if this Logs launch an corrective action (eg : create a bug based on)
		/// </summary>
		[Column,     NotNull    ] public bool     isclosed      { get; set; } // bit
		[Column,     NotNull    ] public string   machinename   { get; set; } // varchar(64)
		[Column,     NotNull    ] public DateTime creationdate  { get; set; } // datetime
		[Column,     NotNull    ] public string   type          { get; set; } // varchar(128)
		[Column,     NotNull    ] public byte     errorlevel    { get; set; } // tinyint
		/// <summary>
		/// Http Status Code
		/// </summary>
		[Column,        Nullable] public int?     statuscode    { get; set; } // int
		/// <summary>
		/// Hashcode of the error, use for group faster duplicate logs
		/// </summary>
		[Column,        Nullable] public int?     errorhash     { get; set; } // int
		[Column,        Nullable] public string   host          { get; set; } // varchar(128)
		[Column,        Nullable] public string   url           { get; set; } // varchar(512)
		[Column,        Nullable] public string   httpmethod    { get; set; } // varchar(8)
		[Column,        Nullable] public string   ipaddress     { get; set; } // varchar(64)
		/// <summary>
		/// Source code of logs
		/// </summary>
		[Column,        Nullable] public string   source        { get; set; } // nvarchar(128)
		[Column,        Nullable] public string   message       { get; set; } // nvarchar(1024)
		[Column,        Nullable] public string   detail        { get; set; } // nvarchar(max)
		/// <summary>
		/// SQL Error if it exists
		/// </summary>
		[Column,        Nullable] public string   sql           { get; set; } // nvarchar(max)
		/// <summary>
		/// Full json of logs : should be move in other table and use the new SQL 2016 json fied type
		/// </summary>
		[Column,        Nullable] public string   fulljson      { get; set; } // nvarchar(max)
	}

	/// <summary>
	/// Ping information from users
	/// </summary>
	[Table(Schema="dbo", Name="userping")]
	public partial class userping
	{
		[PrimaryKey, Identity   ] public long     id            { get; set; } // bigint
		/// <summary>
		/// Application ID
		/// </summary>
		[Column,     NotNull    ] public string   applicationid { get; set; } // char(8)
		/// <summary>
		/// Created Date (UTC)
		/// </summary>
		[Column,     NotNull    ] public DateTime utctimestamp  { get; set; } // datetime
		/// <summary>
		/// User Id from app
		/// </summary>
		[Column,     NotNull    ] public string   userid        { get; set; } // nvarchar(128)
		[Column,        Nullable] public string   pageid        { get; set; } // varchar(128)
		[Column,        Nullable] public string   browerinfo    { get; set; } // varchar(1024)
	}

	public static partial class TableExtensions
	{
		public static extenduser Find(this ITable<extenduser> table, Guid userid, string key)
		{
			return table.FirstOrDefault(t =>
				t.userid == userid &&
				t.key    == key);
		}

		public static feedback Find(this ITable<feedback> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static log Find(this ITable<log> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static userping Find(this ITable<userping> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}
	}
}
